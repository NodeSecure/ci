import * as scanner from "@nodesecure/scanner";
import type { Scanner } from "@nodesecure/scanner";
import * as vuln from "@nodesecure/vuln";

import {
  ExternalRuntimeConfiguration,
  standardizeConfig
} from "../config/external/standardize.js";
import { analyzeEnvironmentContext } from "../environment/index.js";
import { consolePrinter } from "../lib/console-printer/index.js";
import * as RC from "../nodesecurerc.js";
import {
  OutcomePayloadFromPipelineChecks,
  runPayloadInterpreter
} from "../payload/index.js";
import { scannerReporter, runReporting } from "../reporters/index.js";
import { environmentContextReporter } from "../reporters/internal/environment.js";

import { status } from "./status.js";

async function runScannerAnalysis(
  runtimeConfig: RC.Configuration
): Promise<Scanner.Payload> {
  const { strategy } = await vuln.setStrategy(
    vuln.strategies[runtimeConfig.strategy]
  );

  /**
   * Using a Generator here allows to centralize different reporting steps that
   * should occur at a different moments in time, in a controlled way and in
   * a deterministic order. At any given moment in time we can Push the required
   * data for reporting to the Generator.
   */
  const initScannerReporter = scannerReporter.report(void 0);
  const logger = new scanner.Logger();
  const sequentialReporterWithLogger = initScannerReporter(logger);

  // First step of the reporting
  sequentialReporterWithLogger.next();

  const payload = await scanner.cwd(
    runtimeConfig.rootDir,
    {
      vulnerabilityStrategy: strategy
    },
    logger
  );

  /**
   * Second step of the reporting, providing the reporter returned payload
   * from scanner cwd() function.
   */
  sequentialReporterWithLogger.next(payload);
  sequentialReporterWithLogger.return(void 0);

  return payload;
}

function provideErrorCodeToProcess() {
  /**
   * Rather than exiting manually with process.exit() which could result in
   * async operations being aborted, we set the exitCode to 1 (native error code).
   * Consequently, the process can exit gracefully when all tasks are done,
   * whatever the exitCode is.
   */
  process.exitCode = 1;
}

type Maybe<T> = T | undefined;

async function runPayloadChecks(
  payload: Scanner.Payload,
  rc: RC.Configuration,
  autoExitAfterFailure: boolean
): Promise<Maybe<OutcomePayloadFromPipelineChecks>> {
  const interpretedPayload = runPayloadInterpreter(payload, rc);
  await runReporting(interpretedPayload, rc);

  if (interpretedPayload.status === status.FAILURE && autoExitAfterFailure) {
    provideErrorCodeToProcess();
  }

  return interpretedPayload;
}

async function sanitizeRuntimeConfig(
  options: ExternalRuntimeConfiguration
): Promise<RC.Configuration> {
  const standardizedCliConfig = standardizeConfig(options);
  const runtimeConfig = {
    /**
     * The default @nodesecure/ci runtime configuration comes from a constant
     * and should be used as a fallback when no external config or a partial one
     * is provided.
     * The external config can be coming from three distincts sources:
     * - NodeSecure runtime config (.nodesecurerc file)
     * - CLI config when running the script through the CLI
     * - API config when using the module API
     *
     * This ensure that we have a consistent representation of the @nodesecure/ci
     * runtime configuration wherever the options are coming from.
     */
    ...RC.DEFAULT_RUNTIME_CONFIGURATION,
    ...standardizedCliConfig
  } as RC.Configuration;

  const environment = await analyzeEnvironmentContext(runtimeConfig);
  environmentContextReporter.report(runtimeConfig)(environment);

  return {
    ...runtimeConfig,
    /**
     * Strategy may have been changed depending on the lockfile compatibility.
     * Now that we reported the environment context, we can only keep the most
     * compatible strategy
     */
    strategy: environment.compatibleStrategy
  };
}

export async function runPipeline(
  options: ExternalRuntimeConfiguration & { autoExitAfterFailure: boolean }
): Promise<Maybe<OutcomePayloadFromPipelineChecks>> {
  try {
    const defaultAutoExitAfterFailure =
      (options && options.autoExitAfterFailure) ?? true;

    const sanitizedRuntimeConfig = await sanitizeRuntimeConfig(options);
    const analysisPayload = await runScannerAnalysis(sanitizedRuntimeConfig);

    /**
     * Once the payload generated by the scanner analysis is available, we can
     * now run the interpreter and use the config to determine whether the
     * pipeline should fail or be successful.
     */
    return await runPayloadChecks(
      analysisPayload,
      sanitizedRuntimeConfig,
      defaultAutoExitAfterFailure
    );
  } catch (uncaughtError: any) {
    consolePrinter.font
      .standard(uncaughtError.message)
      .prefix(consolePrinter.font.highlightedError("error").message)
      .print();

    provideErrorCodeToProcess();

    return void 0;
  }
}
